import com.google.gson.GsonBuilder;
import edu.stanford.nlp.simple.Sentence;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'koray2' at '4/8/16 5:56 PM' with Gradle 2.6
 *
 * @author koray2, @date 4/8/16 5:56 PM
 */
public class Bil681Project {

    private static final Logger LOGGER = Logger.getLogger(Bil681Project.class.getName());

    public static final String RAW_DATA_DIRECTORY = "test-data"; // relative to project root

    public static void main(String... args) throws IOException {
        Bil681Project project = new Bil681Project();
        List<Document> documents = project.memoizeDocumentsUnderPath(Paths.get(RAW_DATA_DIRECTORY));
        List<RecipeData> recipeDatas = project.parseDocuments(documents);


    }

    /**
     * parses each file in directory to in memory Jsoup documents
     *
     * @param directory
     * @return list of discovered jsoup documents
     * @throws IOException
     */
    public List<Document> memoizeDocumentsUnderPath(Path directory) throws IOException {
        final List<Document> documents = new ArrayList<Document>();
        Files.list(directory).forEach((k) -> {
            try {
                documents.add(Jsoup.parse(k.toFile(), "UTF-8"));
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
        return documents;
    }

    /**
     * Parses to extract specific data into custom java pojo from recipe document. Expects very specific data format.
     *
     * @param documents list of allrecipe.com recipe html jsoup document
     * @return list of RecipeData objects
     */
    public List<RecipeData> parseDocuments(List<Document> documents) {
        List<RecipeData> recipeDatas = new ArrayList<>();
        for (Document d : documents) {
            RecipeData recipeData = new RecipeData();
            recipeData.title = d.getElementsByClass("recipe-summary__h1").html();
            recipeData.description = d.getElementsByClass("submitter__description").html();
            recipeData.submitter = d.getElementsByClass("submitter__name").html();
            recipeData.ingredients = d.getElementsByAttributeValue("itemprop", "ingredients").html().replace("\n", ". ");
            recipeData.servings = d.getElementById("metaRecipeServings").attr("content");
            recipeData.duration = d.getElementsByClass("ready-in-time").html();
            recipeData.nutrition = d.getElementsByClass("calorie-count").get(0).child(0).text();
            recipeData.directions = d.getElementsByClass("recipe-directions__list--item").html().replace("\n", ". ");
            LOGGER.log(Level.INFO, recipeData.toString());
            recipeDatas.add(recipeData);
        }
        return recipeDatas;
    }

    public class RecipeData {
        public String title, description, submitter, ingredients, servings, duration, directions, nutrition, category;

        edu.stanford.nlp.simple.Document document;

        @Override
        public String toString() {
            //don't try this at home!
            return new GsonBuilder().setPrettyPrinting().create().toJson(this);
        }

        public String toPlainString() {
            return title + " " + description + " " + submitter + " " + ingredients + " " + servings + " " + duration + " " + directions + " " + nutrition;
        }

        public edu.stanford.nlp.simple.Document getDocument() {
            if (document == null) document = new edu.stanford.nlp.simple.Document(this.toPlainString());
            return document;
        }

        public List<Sentence> getSentences() {
            return document.sentences();
        }

        public List<String> getLematizedWords() {
            for (Sentence s : getDocument().sentences()) {

            }

        }

    }

}
